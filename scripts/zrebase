#!/bin/bash

###############################################################################
# zrebase
#  - Rebase all z prefixed branches in puppet control
#  - This will be destructive if you don't know what is going on here.
#
PRIMARY_BRANCH='production'
INTEGRATION_BRANCH='zworking'
PROTECTED_BRANCHES_REGEX='production\|master\|develop\|zworking\|working\|save|z_elastic'
Z_BRANCH_PATTERN='^z'

usage() {
    echo 'Sorry.  No help yet. Please dont use.'
}

sanity_check() {
    git --version || (echo 'Git is missing' && exit 1)
}

print_header() {
    echo
    echo '+----------------------------------------------------------+'
    echo "| ${1}"
    echo '|'
    echo
}

print_subheader() {
    echo
    echo '|'
    echo "| ${1}"
    echo '|'
    echo
}

sync_remote() {
    print_header 'Sync Remotes...'
    git checkout    ${PRIMARY_BRANCH} || exit 1
    git fetch --all --prune
    git checkout    ${PRIMARY_BRANCH} || exit 1
    git pull origin ${PRIMARY_BRANCH} || exit 1
    git push origin ${PRIMARY_BRANCH} || exit 1
    git fetch --all --prune
}

rebase_branches() {
    print_header 'Rebasing...'

    git checkout ${INTEGRATION_BRANCH} || exit 1
    git rebase   ${PRIMARY_BRANCH}     || exit 1


    ZBRANCHES=$(git branch --no-merged ${INTEGRATION_BRANCH} | awk '{print $1}' | grep -v "${PROTECTED_BRANCHES_REGEX}" | grep -v '*' | grep ^z | xargs)

    for ZBRANCH in ${ZBRANCHES}
    do
        print_subheader "ZBRANCH: ${ZBRANCH}"
        git checkout ${ZBRANCH}       || exit 1
        git rebase   ${INTEGRATION_BRANCH} || exit 1
        git push -f origin ${ZBRANCH} || exit 1
    done

    git checkout ${INTEGRATION_BRANCH} || exit 1
}

cleanup_merged_branches() {
    print_header 'Cleaning Up...'

    git checkout ${PRIMARY_BRANCH} || exit 1

    MERGED_BRANCHES=$(git branch --merged production | grep -v "${PROTECTED_BRANCHES_REGEX}" | awk '{print $1}' | xargs)

    for MERGED_BRANCH in ${MERGED_BRANCHES}
    do
        print_subheader "Deleting: ${MERGED_BRANCH} from local and origin"
        git branch -d ${MERGED_BRANCH}                     || exit 1
        git push origin --delete ${MERGED_BRANCH}
    done

    git checkout ${PRIMARY_BRANCH} || exit 1
}


###############################################################################
# Main
#
sanity_check                   \
    && sync_remote             \
    && rebase_branches         \
    && sync_remote             \
    && sync_remote
exit ${RETVAL}
# vim: set expandtab smarttab tabstop=4 shiftwidth=4 softtabstop=4:
